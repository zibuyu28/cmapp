syntax = "proto3";

option go_package = "./driver";

package driver;

// MachineDriver machine driver service
service MachineDriver {
    // GetCreateFlags get create flags
    rpc GetCreateFlags (Empty) returns (Flags) {
    }

    // SetConfigFromFlags set driver config from flags
    rpc SetConfigFromFlags (Flags) returns (Empty) {
    }

    // InitMachine create a machine to store
    rpc InitMachine (Empty) returns (Machine) {
    }

    // CreateExec driver to execute really create action for a machine
    rpc CreateExec (Empty) returns (Machine) {
    }

    // InstallMRobot install machine robot in this new machine
    rpc InstallMRobot (Empty) returns (Machine) {
    }

    // MRoHealthCheck check machine robot install successfully or not
    rpc MRoHealthCheck (Empty) returns (Machine) {
    }

    // Exit driver exit
    rpc Exit (Empty) returns (Empty) {
    }
}

message Flags {
    repeated Flag Flags = 1;
}

message Flag {
    string Name = 1;
    string Usage = 2;
    string EnvVar = 3;
    repeated string value = 4;
}

message Empty {
}

message Machine {
    string UUID = 1;
    int32 State = 2;
    int32 DriverID = 3;
    repeated string Tags = 4;
    map<string, string> CustomInfo = 5;
    string AGGRPCAddr = 6;
}