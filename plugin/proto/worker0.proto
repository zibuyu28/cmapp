syntax = "proto3";

option go_package = "./worker0";
package worker0;


service Worker0 {

    rpc NewApp (NewAppReq) returns (App) {
    }

    rpc StartApp (App) returns (Empty) {
    }

    rpc StopApp (App) returns (Empty) {
    }

    rpc DestroyApp (App) returns (Empty) {
    }

    // --- construct App ---
    rpc TagEx (App.Tag) returns (App.Tag) {
    }
    rpc FileMountEx (App.FileMount) returns (App.FileMount) {
    }
    rpc EnvEx (App.EnvVar) returns (App.EnvVar) {
    }
    rpc NetworkEx (App.Network) returns (App.Network) {
    }
    rpc FilePremiseEx (App.File) returns (App.File) {
    }
    rpc LimitEx (App.Limit) returns (App.Limit) {
    }
    rpc HealthEx (App.Health) returns (App.Health) {
    }
    rpc LogEx (App.Log) returns (App.Log) {
    }

}

message NewAppReq {
    string Name = 1;
    string version = 2;
}


message App {
    string UUID = 1;
    message MainProcess {
        string CheckSum = 1;
        string Name = 2;
        string Version = 3;
        enum PType {
            Binary = 0;
            Image = 1;
        }
        PType Type = 4;
        string Workdir = 5;
        repeated string StartCMD = 6;
    }
    MainProcess MainP = 2;

    // 将文件挂载到对应的目录
    // File 表示要被挂载的文件
    // MountTo 表示挂载到的地方
    // Volume 一般不填这个字段，除非有对应的卷存在
    message FileMount {
        string File = 1;
        string MountTo = 2;
        string Volume = 3;
    }

    repeated FileMount FileMounts = 3;

    message EnvVar {
        string Key = 1;
        string Value = 2;
    }

    repeated EnvVar EnvironmentVars = 4;

    message Network {
        message PortInf {
            int32 Port = 1;
            string Name = 2;
            enum Protocol {
                TCP = 0;
                UDP = 1;
            }
            Protocol ProtocolType = 3;
        }
        message RouteInf {
            enum Route {
                IN = 0;
                OUT = 1;
            }
            Route RouteType = 1;
            string Router = 2;
        }
        PortInf PortInfo = 1;
        repeated RouteInf RouteInfo = 2;
    }

    repeated Network Networks = 5;

    message WorkspaceInfo {
        string Workspace = 1;
    }

    WorkspaceInfo Workspace = 6;

    message File {
        string Name = 1;
        string AcquireAddr = 2;
        string Shell = 3;
    }

    repeated File FilePremise = 7;

    message Limit {
        // unit 'm'
        int32 CPU = 1;
        // unit 'MB'
        int32 Memory = 2;
    }

    Limit LimitInfo = 8;

    message Health {
        message Basic {
            // supported http method
            enum Method {
                GET = 0;
                POST = 1;
            }
            Method MethodType = 1;
            // path to request
            string Path = 2;
            // same as above
            int32 Port = 3;
        }
        // url to judge app living
        Basic Liveness = 1;

        // url to judge app working
        Basic Readness = 2;
    }

    Health HealthInfo = 9;

    message Log {
        // Real-time log file name. eg: xxx/log.log
        string RealTimeFile = 1;
        // path of compress log file
        string FilePath = 2;
    }

    Log LogInfo = 10;

    message Tag {
        string Key = 1;
        string Value = 2;
    }

    repeated Tag Tags = 11;


}

message Empty {
}