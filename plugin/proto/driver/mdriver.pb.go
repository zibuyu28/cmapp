// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: mdriver.proto

package driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []*Flag `protobuf:"bytes,1,rep,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdriver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_mdriver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_mdriver_proto_rawDescGZIP(), []int{0}
}

func (x *Flags) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Usage  string   `protobuf:"bytes,2,opt,name=Usage,proto3" json:"Usage,omitempty"`
	EnvVar string   `protobuf:"bytes,3,opt,name=EnvVar,proto3" json:"EnvVar,omitempty"`
	Value  []string `protobuf:"bytes,4,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdriver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_mdriver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_mdriver_proto_rawDescGZIP(), []int{1}
}

func (x *Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *Flag) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

func (x *Flag) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdriver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_mdriver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_mdriver_proto_rawDescGZIP(), []int{2}
}

type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID       string            `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State      int32             `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
	DriverID   int32             `protobuf:"varint,3,opt,name=DriverID,proto3" json:"DriverID,omitempty"`
	Tags       []string          `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CustomInfo map[string]string `protobuf:"bytes,5,rep,name=CustomInfo,proto3" json:"CustomInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AGGRPCAddr string            `protobuf:"bytes,6,opt,name=AGGRPCAddr,proto3" json:"AGGRPCAddr,omitempty"`
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdriver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_mdriver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_mdriver_proto_rawDescGZIP(), []int{3}
}

func (x *Machine) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Machine) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Machine) GetDriverID() int32 {
	if x != nil {
		return x.DriverID
	}
	return 0
}

func (x *Machine) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Machine) GetCustomInfo() map[string]string {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

func (x *Machine) GetAGGRPCAddr() string {
	if x != nil {
		return x.AGGRPCAddr
	}
	return ""
}

var File_mdriver_proto protoreflect.FileDescriptor

var file_mdriver_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x5e, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x83, 0x02,
	0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x50, 0x43, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x50, 0x43,
	0x41, 0x64, 0x64, 0x72, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xe7, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0d, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a,
	0x0b, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x0d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x0d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12,
	0x0d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x0e, 0x4d, 0x52, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x0d, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mdriver_proto_rawDescOnce sync.Once
	file_mdriver_proto_rawDescData = file_mdriver_proto_rawDesc
)

func file_mdriver_proto_rawDescGZIP() []byte {
	file_mdriver_proto_rawDescOnce.Do(func() {
		file_mdriver_proto_rawDescData = protoimpl.X.CompressGZIP(file_mdriver_proto_rawDescData)
	})
	return file_mdriver_proto_rawDescData
}

var file_mdriver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mdriver_proto_goTypes = []interface{}{
	(*Flags)(nil),   // 0: driver.Flags
	(*Flag)(nil),    // 1: driver.Flag
	(*Empty)(nil),   // 2: driver.Empty
	(*Machine)(nil), // 3: driver.Machine
	nil,             // 4: driver.Machine.CustomInfoEntry
}
var file_mdriver_proto_depIdxs = []int32{
	1, // 0: driver.Flags.Flags:type_name -> driver.Flag
	4, // 1: driver.Machine.CustomInfo:type_name -> driver.Machine.CustomInfoEntry
	2, // 2: driver.MachineDriver.GetCreateFlags:input_type -> driver.Empty
	0, // 3: driver.MachineDriver.SetConfigFromFlags:input_type -> driver.Flags
	2, // 4: driver.MachineDriver.InitMachine:input_type -> driver.Empty
	2, // 5: driver.MachineDriver.CreateExec:input_type -> driver.Empty
	2, // 6: driver.MachineDriver.InstallMRobot:input_type -> driver.Empty
	2, // 7: driver.MachineDriver.MRoHealthCheck:input_type -> driver.Empty
	2, // 8: driver.MachineDriver.Exit:input_type -> driver.Empty
	0, // 9: driver.MachineDriver.GetCreateFlags:output_type -> driver.Flags
	2, // 10: driver.MachineDriver.SetConfigFromFlags:output_type -> driver.Empty
	3, // 11: driver.MachineDriver.InitMachine:output_type -> driver.Machine
	3, // 12: driver.MachineDriver.CreateExec:output_type -> driver.Machine
	3, // 13: driver.MachineDriver.InstallMRobot:output_type -> driver.Machine
	3, // 14: driver.MachineDriver.MRoHealthCheck:output_type -> driver.Machine
	2, // 15: driver.MachineDriver.Exit:output_type -> driver.Empty
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mdriver_proto_init() }
func file_mdriver_proto_init() {
	if File_mdriver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mdriver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdriver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdriver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdriver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mdriver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mdriver_proto_goTypes,
		DependencyIndexes: file_mdriver_proto_depIdxs,
		MessageInfos:      file_mdriver_proto_msgTypes,
	}.Build()
	File_mdriver_proto = out.File
	file_mdriver_proto_rawDesc = nil
	file_mdriver_proto_goTypes = nil
	file_mdriver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineDriverClient is the client API for MachineDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineDriverClient interface {
	// GetCreateFlags get create flags
	GetCreateFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Flags, error)
	// SetConfigFromFlags set driver config from flags
	SetConfigFromFlags(ctx context.Context, in *Flags, opts ...grpc.CallOption) (*Empty, error)
	// InitMachine create a machine to store
	InitMachine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error)
	// CreateExec driver to execute really create action for a machine
	CreateExec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error)
	// InstallMRobot install machine robot in this new machine
	InstallMRobot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error)
	// MRoHealthCheck check machine robot install successfully or not
	MRoHealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error)
	// Exit driver exit
	Exit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type machineDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineDriverClient(cc grpc.ClientConnInterface) MachineDriverClient {
	return &machineDriverClient{cc}
}

func (c *machineDriverClient) GetCreateFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Flags, error) {
	out := new(Flags)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/GetCreateFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) SetConfigFromFlags(ctx context.Context, in *Flags, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/SetConfigFromFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) InitMachine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/InitMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) CreateExec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/CreateExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) InstallMRobot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/InstallMRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) MRoHealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/MRoHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDriverClient) Exit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/driver.MachineDriver/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineDriverServer is the server API for MachineDriver service.
type MachineDriverServer interface {
	// GetCreateFlags get create flags
	GetCreateFlags(context.Context, *Empty) (*Flags, error)
	// SetConfigFromFlags set driver config from flags
	SetConfigFromFlags(context.Context, *Flags) (*Empty, error)
	// InitMachine create a machine to store
	InitMachine(context.Context, *Empty) (*Machine, error)
	// CreateExec driver to execute really create action for a machine
	CreateExec(context.Context, *Empty) (*Machine, error)
	// InstallMRobot install machine robot in this new machine
	InstallMRobot(context.Context, *Empty) (*Machine, error)
	// MRoHealthCheck check machine robot install successfully or not
	MRoHealthCheck(context.Context, *Empty) (*Machine, error)
	// Exit driver exit
	Exit(context.Context, *Empty) (*Empty, error)
}

// UnimplementedMachineDriverServer can be embedded to have forward compatible implementations.
type UnimplementedMachineDriverServer struct {
}

func (*UnimplementedMachineDriverServer) GetCreateFlags(context.Context, *Empty) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateFlags not implemented")
}
func (*UnimplementedMachineDriverServer) SetConfigFromFlags(context.Context, *Flags) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigFromFlags not implemented")
}
func (*UnimplementedMachineDriverServer) InitMachine(context.Context, *Empty) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMachine not implemented")
}
func (*UnimplementedMachineDriverServer) CreateExec(context.Context, *Empty) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExec not implemented")
}
func (*UnimplementedMachineDriverServer) InstallMRobot(context.Context, *Empty) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallMRobot not implemented")
}
func (*UnimplementedMachineDriverServer) MRoHealthCheck(context.Context, *Empty) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoHealthCheck not implemented")
}
func (*UnimplementedMachineDriverServer) Exit(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}

func RegisterMachineDriverServer(s *grpc.Server, srv MachineDriverServer) {
	s.RegisterService(&_MachineDriver_serviceDesc, srv)
}

func _MachineDriver_GetCreateFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).GetCreateFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/GetCreateFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).GetCreateFlags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_SetConfigFromFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).SetConfigFromFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/SetConfigFromFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).SetConfigFromFlags(ctx, req.(*Flags))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_InitMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).InitMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/InitMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).InitMachine(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_CreateExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).CreateExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/CreateExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).CreateExec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_InstallMRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).InstallMRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/InstallMRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).InstallMRobot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_MRoHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).MRoHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/MRoHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).MRoHealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDriver_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDriverServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.MachineDriver/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDriverServer).Exit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driver.MachineDriver",
	HandlerType: (*MachineDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreateFlags",
			Handler:    _MachineDriver_GetCreateFlags_Handler,
		},
		{
			MethodName: "SetConfigFromFlags",
			Handler:    _MachineDriver_SetConfigFromFlags_Handler,
		},
		{
			MethodName: "InitMachine",
			Handler:    _MachineDriver_InitMachine_Handler,
		},
		{
			MethodName: "CreateExec",
			Handler:    _MachineDriver_CreateExec_Handler,
		},
		{
			MethodName: "InstallMRobot",
			Handler:    _MachineDriver_InstallMRobot_Handler,
		},
		{
			MethodName: "MRoHealthCheck",
			Handler:    _MachineDriver_MRoHealthCheck_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _MachineDriver_Exit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mdriver.proto",
}
