// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: worker.proto

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortExternalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	ExternalRoute string `protobuf:"bytes,2,opt,name=ExternalRoute,proto3" json:"ExternalRoute,omitempty"`
}

func (x *PortExternalInfo) Reset() {
	*x = PortExternalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortExternalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortExternalInfo) ProtoMessage() {}

func (x *PortExternalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortExternalInfo.ProtoReflect.Descriptor instead.
func (*PortExternalInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *PortExternalInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortExternalInfo) GetExternalRoute() string {
	if x != nil {
		return x.ExternalRoute
	}
	return ""
}

type TargetPortExternalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *TargetPortExternalInfo) Reset() {
	*x = TargetPortExternalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetPortExternalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPortExternalInfo) ProtoMessage() {}

func (x *TargetPortExternalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPortExternalInfo.ProtoReflect.Descriptor instead.
func (*TargetPortExternalInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *TargetPortExternalInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PortIntranetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	IntranetRoute string `protobuf:"bytes,2,opt,name=IntranetRoute,proto3" json:"IntranetRoute,omitempty"`
}

func (x *PortIntranetInfo) Reset() {
	*x = PortIntranetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortIntranetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortIntranetInfo) ProtoMessage() {}

func (x *PortIntranetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortIntranetInfo.ProtoReflect.Descriptor instead.
func (*PortIntranetInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *PortIntranetInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortIntranetInfo) GetIntranetRoute() string {
	if x != nil {
		return x.IntranetRoute
	}
	return ""
}

type TargetPortIntranetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *TargetPortIntranetInfo) Reset() {
	*x = TargetPortIntranetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetPortIntranetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPortIntranetInfo) ProtoMessage() {}

func (x *TargetPortIntranetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPortIntranetInfo.ProtoReflect.Descriptor instead.
func (*TargetPortIntranetInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *TargetPortIntranetInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SetupAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envs   map[string]string `protobuf:"bytes,1,rep,name=Envs,proto3" json:"Envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetupAppInfo) Reset() {
	*x = SetupAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupAppInfo) ProtoMessage() {}

func (x *SetupAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupAppInfo.ProtoReflect.Descriptor instead.
func (*SetupAppInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *SetupAppInfo) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *SetupAppInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *App) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CheckTargetPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *CheckTargetPortInfo) Reset() {
	*x = CheckTargetPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTargetPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTargetPortInfo) ProtoMessage() {}

func (x *CheckTargetPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTargetPortInfo.ProtoReflect.Descriptor instead.
func (*CheckTargetPortInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{6}
}

func (x *CheckTargetPortInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ContentLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line []byte `protobuf:"bytes,1,opt,name=Line,proto3" json:"Line,omitempty"`
}

func (x *ContentLine) Reset() {
	*x = ContentLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentLine) ProtoMessage() {}

func (x *ContentLine) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentLine.ProtoReflect.Descriptor instead.
func (*ContentLine) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{7}
}

func (x *ContentLine) GetLine() []byte {
	if x != nil {
		return x.Line
	}
	return nil
}

type FetchFileContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
}

func (x *FetchFileContentInfo) Reset() {
	*x = FetchFileContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchFileContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchFileContentInfo) ProtoMessage() {}

func (x *FetchFileContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchFileContentInfo.ProtoReflect.Descriptor instead.
func (*FetchFileContentInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{8}
}

func (x *FetchFileContentInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type RemoveDirInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir string `protobuf:"bytes,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
}

func (x *RemoveDirInfo) Reset() {
	*x = RemoveDirInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDirInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirInfo) ProtoMessage() {}

func (x *RemoveDirInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirInfo.ProtoReflect.Descriptor instead.
func (*RemoveDirInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveDirInfo) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

type CreateDirInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir string `protobuf:"bytes,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
}

func (x *CreateDirInfo) Reset() {
	*x = CreateDirInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirInfo) ProtoMessage() {}

func (x *CreateDirInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirInfo.ProtoReflect.Descriptor instead.
func (*CreateDirInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDirInfo) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

type CreateFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    string `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *CreateFileInfo) Reset() {
	*x = CreateFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileInfo) ProtoMessage() {}

func (x *CreateFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileInfo.ProtoReflect.Descriptor instead.
func (*CreateFileInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFileInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CreateFileInfo) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type DeleteFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetFile string `protobuf:"bytes,1,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
}

func (x *DeleteFileInfo) Reset() {
	*x = DeleteFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileInfo) ProtoMessage() {}

func (x *DeleteFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileInfo.ProtoReflect.Descriptor instead.
func (*DeleteFileInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteFileInfo) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

type UpdateFileContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetFile string `protobuf:"bytes,1,opt,name=TargetFile,proto3" json:"TargetFile,omitempty"`
	NewContent []byte `protobuf:"bytes,2,opt,name=newContent,proto3" json:"newContent,omitempty"`
}

func (x *UpdateFileContentInfo) Reset() {
	*x = UpdateFileContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileContentInfo) ProtoMessage() {}

func (x *UpdateFileContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileContentInfo.ProtoReflect.Descriptor instead.
func (*UpdateFileContentInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFileContentInfo) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

func (x *UpdateFileContentInfo) GetNewContent() []byte {
	if x != nil {
		return x.NewContent
	}
	return nil
}

type CopyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile string `protobuf:"bytes,1,opt,name=SourceFile,proto3" json:"SourceFile,omitempty"`
	TargetPath string `protobuf:"bytes,2,opt,name=TargetPath,proto3" json:"TargetPath,omitempty"`
}

func (x *CopyInfo) Reset() {
	*x = CopyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyInfo) ProtoMessage() {}

func (x *CopyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyInfo.ProtoReflect.Descriptor instead.
func (*CopyInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{14}
}

func (x *CopyInfo) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *CopyInfo) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type WorkspaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *WorkspaceInfo) Reset() {
	*x = WorkspaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceInfo) ProtoMessage() {}

func (x *WorkspaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceInfo.ProtoReflect.Descriptor instead.
func (*WorkspaceInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{15}
}

func (x *WorkspaceInfo) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type DownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadLink string `protobuf:"bytes,1,opt,name=DownloadLink,proto3" json:"DownloadLink,omitempty"`
	TargetPath   string `protobuf:"bytes,2,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
}

func (x *DownloadInfo) Reset() {
	*x = DownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadInfo) ProtoMessage() {}

func (x *DownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadInfo.ProtoReflect.Descriptor instead.
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{16}
}

func (x *DownloadInfo) GetDownloadLink() string {
	if x != nil {
		return x.DownloadLink
	}
	return ""
}

func (x *DownloadInfo) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type UploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile string `protobuf:"bytes,1,opt,name=SourceFile,proto3" json:"SourceFile,omitempty"`
	TargetLink string `protobuf:"bytes,2,opt,name=TargetLink,proto3" json:"TargetLink,omitempty"`
}

func (x *UploadInfo) Reset() {
	*x = UploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInfo) ProtoMessage() {}

func (x *UploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInfo.ProtoReflect.Descriptor instead.
func (*UploadInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{17}
}

func (x *UploadInfo) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *UploadInfo) GetTargetLink() string {
	if x != nil {
		return x.TargetLink
	}
	return ""
}

type CompressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirPath string `protobuf:"bytes,1,opt,name=DirPath,proto3" json:"DirPath,omitempty"`
}

func (x *CompressInfo) Reset() {
	*x = CompressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressInfo) ProtoMessage() {}

func (x *CompressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressInfo.ProtoReflect.Descriptor instead.
func (*CompressInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{18}
}

func (x *CompressInfo) GetDirPath() string {
	if x != nil {
		return x.DirPath
	}
	return ""
}

type DeCompressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TarFile string `protobuf:"bytes,1,opt,name=TarFile,proto3" json:"TarFile,omitempty"`
}

func (x *DeCompressInfo) Reset() {
	*x = DeCompressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeCompressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeCompressInfo) ProtoMessage() {}

func (x *DeCompressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeCompressInfo.ProtoReflect.Descriptor instead.
func (*DeCompressInfo) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{19}
}

func (x *DeCompressInfo) GetTarFile() string {
	if x != nil {
		return x.TarFile
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{20}
}

var File_worker_proto protoreflect.FileDescriptor

var file_worker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c,
	0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x16,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x76, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x45, 0x6e, 0x76, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x03, 0x41,
	0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x22, 0x21, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x2d, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x52, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x22, 0x28, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x0e,
	0x44, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0xef, 0x06, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x06, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0d, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x1f, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0b, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0d, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x44, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x1b,
	0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x12, 0x0e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x12, 0x0e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x14, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x06,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x04, 0x2e, 0x41, 0x70, 0x70, 0x22, 0x00, 0x12, 0x18, 0x0a, 0x04, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x06, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x0b, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x41, 0x70, 0x70, 0x12, 0x04, 0x2e, 0x41, 0x70, 0x70, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x1b, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x04, 0x2e, 0x41, 0x70, 0x70, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x17, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x17, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData = file_worker_proto_rawDesc
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_proto_rawDescData)
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_worker_proto_goTypes = []interface{}{
	(*PortExternalInfo)(nil),       // 0: PortExternalInfo
	(*TargetPortExternalInfo)(nil), // 1: TargetPortExternalInfo
	(*PortIntranetInfo)(nil),       // 2: PortIntranetInfo
	(*TargetPortIntranetInfo)(nil), // 3: TargetPortIntranetInfo
	(*SetupAppInfo)(nil),           // 4: SetupAppInfo
	(*App)(nil),                    // 5: App
	(*CheckTargetPortInfo)(nil),    // 6: CheckTargetPortInfo
	(*ContentLine)(nil),            // 7: ContentLine
	(*FetchFileContentInfo)(nil),   // 8: FetchFileContentInfo
	(*RemoveDirInfo)(nil),          // 9: RemoveDirInfo
	(*CreateDirInfo)(nil),          // 10: CreateDirInfo
	(*CreateFileInfo)(nil),         // 11: CreateFileInfo
	(*DeleteFileInfo)(nil),         // 12: DeleteFileInfo
	(*UpdateFileContentInfo)(nil),  // 13: UpdateFileContentInfo
	(*CopyInfo)(nil),               // 14: CopyInfo
	(*WorkspaceInfo)(nil),          // 15: WorkspaceInfo
	(*DownloadInfo)(nil),           // 16: DownloadInfo
	(*UploadInfo)(nil),             // 17: UploadInfo
	(*CompressInfo)(nil),           // 18: CompressInfo
	(*DeCompressInfo)(nil),         // 19: DeCompressInfo
	(*Empty)(nil),                  // 20: Empty
	nil,                            // 21: SetupAppInfo.EnvsEntry
	nil,                            // 22: SetupAppInfo.LabelsEntry
}
var file_worker_proto_depIdxs = []int32{
	21, // 0: SetupAppInfo.Envs:type_name -> SetupAppInfo.EnvsEntry
	22, // 1: SetupAppInfo.Labels:type_name -> SetupAppInfo.LabelsEntry
	20, // 2: Worker.GetWorkspace:input_type -> Empty
	15, // 3: Worker.DestroyWorkspace:input_type -> WorkspaceInfo
	16, // 4: Worker.DownloadToPath:input_type -> DownloadInfo
	17, // 5: Worker.Upload:input_type -> UploadInfo
	18, // 6: Worker.Compress:input_type -> CompressInfo
	19, // 7: Worker.Decompress:input_type -> DeCompressInfo
	14, // 8: Worker.Copy:input_type -> CopyInfo
	13, // 9: Worker.UpdateFileContent:input_type -> UpdateFileContentInfo
	12, // 10: Worker.DeleteFile:input_type -> DeleteFileInfo
	11, // 11: Worker.CreateFile:input_type -> CreateFileInfo
	10, // 12: Worker.CreateDir:input_type -> CreateDirInfo
	9,  // 13: Worker.RemoveDir:input_type -> RemoveDirInfo
	8,  // 14: Worker.FetchFileContent:input_type -> FetchFileContentInfo
	6,  // 15: Worker.CheckTargetPortUseful:input_type -> CheckTargetPortInfo
	4,  // 16: Worker.SetupApp:input_type -> SetupAppInfo
	20, // 17: Worker.Done:input_type -> Empty
	5,  // 18: Worker.ShutdownApp:input_type -> App
	5,  // 19: Worker.AppHealth:input_type -> App
	3,  // 20: Worker.TargetPortIntranetRoute:input_type -> TargetPortIntranetInfo
	1,  // 21: Worker.TargetPortExternalRoute:input_type -> TargetPortExternalInfo
	15, // 22: Worker.GetWorkspace:output_type -> WorkspaceInfo
	20, // 23: Worker.DestroyWorkspace:output_type -> Empty
	20, // 24: Worker.DownloadToPath:output_type -> Empty
	20, // 25: Worker.Upload:output_type -> Empty
	20, // 26: Worker.Compress:output_type -> Empty
	20, // 27: Worker.Decompress:output_type -> Empty
	20, // 28: Worker.Copy:output_type -> Empty
	20, // 29: Worker.UpdateFileContent:output_type -> Empty
	20, // 30: Worker.DeleteFile:output_type -> Empty
	20, // 31: Worker.CreateFile:output_type -> Empty
	20, // 32: Worker.CreateDir:output_type -> Empty
	20, // 33: Worker.RemoveDir:output_type -> Empty
	7,  // 34: Worker.FetchFileContent:output_type -> ContentLine
	20, // 35: Worker.CheckTargetPortUseful:output_type -> Empty
	5,  // 36: Worker.SetupApp:output_type -> App
	20, // 37: Worker.Done:output_type -> Empty
	20, // 38: Worker.ShutdownApp:output_type -> Empty
	20, // 39: Worker.AppHealth:output_type -> Empty
	2,  // 40: Worker.TargetPortIntranetRoute:output_type -> PortIntranetInfo
	0,  // 41: Worker.TargetPortExternalRoute:output_type -> PortExternalInfo
	22, // [22:42] is the sub-list for method output_type
	2,  // [2:22] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortExternalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetPortExternalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortIntranetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetPortIntranetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTargetPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchFileContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDirInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeCompressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		MessageInfos:      file_worker_proto_msgTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_rawDesc = nil
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	// GetWorkspace require workspace from driver,
	// please make sure this workspace exist and
	// has permission. context have unique uuid
	// for a series of operations
	GetWorkspace(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	// DestroyWorkspace destroy workspace from driver
	DestroyWorkspace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*Empty, error)
	// DownloadToPath download something by download link
	// download link maybe http or other, this is up on
	// driver, target path base on root path of driver,
	// and this target path must exist, driver may not
	// create it
	DownloadToPath(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*Empty, error)
	// Upload upload something to target, source file
	// must exist, target link is the remote addr to upload
	Upload(ctx context.Context, in *UploadInfo, opts ...grpc.CallOption) (*Empty, error)
	// Compress compress dir to ~.tar.gz, file name
	// is same with dir name, file will be generated
	// at same level as file dir
	Compress(ctx context.Context, in *CompressInfo, opts ...grpc.CallOption) (*Empty, error)
	// Decompress decompress file be provided, make sure tar file exist
	// return the father dir path that create by driver, maybe random name
	Decompress(ctx context.Context, in *DeCompressInfo, opts ...grpc.CallOption) (*Empty, error)
	// Copy copy file to target path, make sure source and target exist
	Copy(ctx context.Context, in *CopyInfo, opts ...grpc.CallOption) (*Empty, error)
	// UpdateFileContent update target file content
	UpdateFileContent(ctx context.Context, in *UpdateFileContentInfo, opts ...grpc.CallOption) (*Empty, error)
	// DeleteFile delete target file
	DeleteFile(ctx context.Context, in *DeleteFileInfo, opts ...grpc.CallOption) (*Empty, error)
	// CreateFile create file with content, make sure the file is not
	// exit and will be created
	CreateFile(ctx context.Context, in *CreateFileInfo, opts ...grpc.CallOption) (*Empty, error)
	// CreateDir create dir, base on workspace
	CreateDir(ctx context.Context, in *CreateDirInfo, opts ...grpc.CallOption) (*Empty, error)
	// RemoveDir remove dir, base on workspace
	RemoveDir(ctx context.Context, in *RemoveDirInfo, opts ...grpc.CallOption) (*Empty, error)
	// FetchFileContent fetch file content, return []byte channel. TODO: check the return
	FetchFileContent(ctx context.Context, in *FetchFileContentInfo, opts ...grpc.CallOption) (Worker_FetchFileContentClient, error)
	// CheckTargetPortUseful check target port is occupied or not
	CheckTargetPortUseful(ctx context.Context, in *CheckTargetPortInfo, opts ...grpc.CallOption) (*Empty, error)
	// SetupApp setup app with env and labels
	// return app's unique name, maybe uuid or other
	SetupApp(ctx context.Context, in *SetupAppInfo, opts ...grpc.CallOption) (*App, error)
	// Done this context has been done
	Done(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// ShutdownApp shutdown app with unique name
	ShutdownApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error)
	// AppHealth judge app health or not
	AppHealth(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error)
	// TargetPortIntranetRoute create a intranet route for given port
	TargetPortIntranetRoute(ctx context.Context, in *TargetPortIntranetInfo, opts ...grpc.CallOption) (*PortIntranetInfo, error)
	// TargetPortExternalRoute create a external route for given port
	TargetPortExternalRoute(ctx context.Context, in *TargetPortExternalInfo, opts ...grpc.CallOption) (*PortExternalInfo, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) GetWorkspace(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, "/Worker/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DestroyWorkspace(ctx context.Context, in *WorkspaceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/DestroyWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DownloadToPath(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/DownloadToPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Upload(ctx context.Context, in *UploadInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Compress(ctx context.Context, in *CompressInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/Compress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Decompress(ctx context.Context, in *DeCompressInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/Decompress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Copy(ctx context.Context, in *CopyInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateFileContent(ctx context.Context, in *UpdateFileContentInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/UpdateFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteFile(ctx context.Context, in *DeleteFileInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) CreateFile(ctx context.Context, in *CreateFileInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) CreateDir(ctx context.Context, in *CreateDirInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) RemoveDir(ctx context.Context, in *RemoveDirInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/RemoveDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) FetchFileContent(ctx context.Context, in *FetchFileContentInfo, opts ...grpc.CallOption) (Worker_FetchFileContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/Worker/FetchFileContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerFetchFileContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_FetchFileContentClient interface {
	Recv() (*ContentLine, error)
	grpc.ClientStream
}

type workerFetchFileContentClient struct {
	grpc.ClientStream
}

func (x *workerFetchFileContentClient) Recv() (*ContentLine, error) {
	m := new(ContentLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) CheckTargetPortUseful(ctx context.Context, in *CheckTargetPortInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/CheckTargetPortUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SetupApp(ctx context.Context, in *SetupAppInfo, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, "/Worker/SetupApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Done(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ShutdownApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/ShutdownApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) AppHealth(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Worker/AppHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TargetPortIntranetRoute(ctx context.Context, in *TargetPortIntranetInfo, opts ...grpc.CallOption) (*PortIntranetInfo, error) {
	out := new(PortIntranetInfo)
	err := c.cc.Invoke(ctx, "/Worker/TargetPortIntranetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TargetPortExternalRoute(ctx context.Context, in *TargetPortExternalInfo, opts ...grpc.CallOption) (*PortExternalInfo, error) {
	out := new(PortExternalInfo)
	err := c.cc.Invoke(ctx, "/Worker/TargetPortExternalRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	// GetWorkspace require workspace from driver,
	// please make sure this workspace exist and
	// has permission. context have unique uuid
	// for a series of operations
	GetWorkspace(context.Context, *Empty) (*WorkspaceInfo, error)
	// DestroyWorkspace destroy workspace from driver
	DestroyWorkspace(context.Context, *WorkspaceInfo) (*Empty, error)
	// DownloadToPath download something by download link
	// download link maybe http or other, this is up on
	// driver, target path base on root path of driver,
	// and this target path must exist, driver may not
	// create it
	DownloadToPath(context.Context, *DownloadInfo) (*Empty, error)
	// Upload upload something to target, source file
	// must exist, target link is the remote addr to upload
	Upload(context.Context, *UploadInfo) (*Empty, error)
	// Compress compress dir to ~.tar.gz, file name
	// is same with dir name, file will be generated
	// at same level as file dir
	Compress(context.Context, *CompressInfo) (*Empty, error)
	// Decompress decompress file be provided, make sure tar file exist
	// return the father dir path that create by driver, maybe random name
	Decompress(context.Context, *DeCompressInfo) (*Empty, error)
	// Copy copy file to target path, make sure source and target exist
	Copy(context.Context, *CopyInfo) (*Empty, error)
	// UpdateFileContent update target file content
	UpdateFileContent(context.Context, *UpdateFileContentInfo) (*Empty, error)
	// DeleteFile delete target file
	DeleteFile(context.Context, *DeleteFileInfo) (*Empty, error)
	// CreateFile create file with content, make sure the file is not
	// exit and will be created
	CreateFile(context.Context, *CreateFileInfo) (*Empty, error)
	// CreateDir create dir, base on workspace
	CreateDir(context.Context, *CreateDirInfo) (*Empty, error)
	// RemoveDir remove dir, base on workspace
	RemoveDir(context.Context, *RemoveDirInfo) (*Empty, error)
	// FetchFileContent fetch file content, return []byte channel. TODO: check the return
	FetchFileContent(*FetchFileContentInfo, Worker_FetchFileContentServer) error
	// CheckTargetPortUseful check target port is occupied or not
	CheckTargetPortUseful(context.Context, *CheckTargetPortInfo) (*Empty, error)
	// SetupApp setup app with env and labels
	// return app's unique name, maybe uuid or other
	SetupApp(context.Context, *SetupAppInfo) (*App, error)
	// Done this context has been done
	Done(context.Context, *Empty) (*Empty, error)
	// ShutdownApp shutdown app with unique name
	ShutdownApp(context.Context, *App) (*Empty, error)
	// AppHealth judge app health or not
	AppHealth(context.Context, *App) (*Empty, error)
	// TargetPortIntranetRoute create a intranet route for given port
	TargetPortIntranetRoute(context.Context, *TargetPortIntranetInfo) (*PortIntranetInfo, error)
	// TargetPortExternalRoute create a external route for given port
	TargetPortExternalRoute(context.Context, *TargetPortExternalInfo) (*PortExternalInfo, error)
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) GetWorkspace(context.Context, *Empty) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (*UnimplementedWorkerServer) DestroyWorkspace(context.Context, *WorkspaceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWorkspace not implemented")
}
func (*UnimplementedWorkerServer) DownloadToPath(context.Context, *DownloadInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadToPath not implemented")
}
func (*UnimplementedWorkerServer) Upload(context.Context, *UploadInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedWorkerServer) Compress(context.Context, *CompressInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compress not implemented")
}
func (*UnimplementedWorkerServer) Decompress(context.Context, *DeCompressInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decompress not implemented")
}
func (*UnimplementedWorkerServer) Copy(context.Context, *CopyInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (*UnimplementedWorkerServer) UpdateFileContent(context.Context, *UpdateFileContentInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileContent not implemented")
}
func (*UnimplementedWorkerServer) DeleteFile(context.Context, *DeleteFileInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (*UnimplementedWorkerServer) CreateFile(context.Context, *CreateFileInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (*UnimplementedWorkerServer) CreateDir(context.Context, *CreateDirInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (*UnimplementedWorkerServer) RemoveDir(context.Context, *RemoveDirInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDir not implemented")
}
func (*UnimplementedWorkerServer) FetchFileContent(*FetchFileContentInfo, Worker_FetchFileContentServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchFileContent not implemented")
}
func (*UnimplementedWorkerServer) CheckTargetPortUseful(context.Context, *CheckTargetPortInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTargetPortUseful not implemented")
}
func (*UnimplementedWorkerServer) SetupApp(context.Context, *SetupAppInfo) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupApp not implemented")
}
func (*UnimplementedWorkerServer) Done(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}
func (*UnimplementedWorkerServer) ShutdownApp(context.Context, *App) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownApp not implemented")
}
func (*UnimplementedWorkerServer) AppHealth(context.Context, *App) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppHealth not implemented")
}
func (*UnimplementedWorkerServer) TargetPortIntranetRoute(context.Context, *TargetPortIntranetInfo) (*PortIntranetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetPortIntranetRoute not implemented")
}
func (*UnimplementedWorkerServer) TargetPortExternalRoute(context.Context, *TargetPortExternalInfo) (*PortExternalInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetPortExternalRoute not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetWorkspace(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DestroyWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DestroyWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/DestroyWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DestroyWorkspace(ctx, req.(*WorkspaceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DownloadToPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DownloadToPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/DownloadToPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DownloadToPath(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Upload(ctx, req.(*UploadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Compress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Compress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Compress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Compress(ctx, req.(*CompressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Decompress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeCompressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Decompress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Decompress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Decompress(ctx, req.(*DeCompressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Copy(ctx, req.(*CopyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileContentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/UpdateFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateFileContent(ctx, req.(*UpdateFileContentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteFile(ctx, req.(*DeleteFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CreateFile(ctx, req.(*CreateFileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CreateDir(ctx, req.(*CreateDirInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_RemoveDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).RemoveDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/RemoveDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).RemoveDir(ctx, req.(*RemoveDirInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_FetchFileContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchFileContentInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).FetchFileContent(m, &workerFetchFileContentServer{stream})
}

type Worker_FetchFileContentServer interface {
	Send(*ContentLine) error
	grpc.ServerStream
}

type workerFetchFileContentServer struct {
	grpc.ServerStream
}

func (x *workerFetchFileContentServer) Send(m *ContentLine) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_CheckTargetPortUseful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTargetPortInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CheckTargetPortUseful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/CheckTargetPortUseful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CheckTargetPortUseful(ctx, req.(*CheckTargetPortInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SetupApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SetupApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/SetupApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SetupApp(ctx, req.(*SetupAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Done(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ShutdownApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ShutdownApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/ShutdownApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ShutdownApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_AppHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AppHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/AppHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AppHealth(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TargetPortIntranetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetPortIntranetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TargetPortIntranetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/TargetPortIntranetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TargetPortIntranetRoute(ctx, req.(*TargetPortIntranetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TargetPortExternalRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetPortExternalInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TargetPortExternalRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/TargetPortExternalRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TargetPortExternalRoute(ctx, req.(*TargetPortExternalInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkspace",
			Handler:    _Worker_GetWorkspace_Handler,
		},
		{
			MethodName: "DestroyWorkspace",
			Handler:    _Worker_DestroyWorkspace_Handler,
		},
		{
			MethodName: "DownloadToPath",
			Handler:    _Worker_DownloadToPath_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Worker_Upload_Handler,
		},
		{
			MethodName: "Compress",
			Handler:    _Worker_Compress_Handler,
		},
		{
			MethodName: "Decompress",
			Handler:    _Worker_Decompress_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Worker_Copy_Handler,
		},
		{
			MethodName: "UpdateFileContent",
			Handler:    _Worker_UpdateFileContent_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Worker_DeleteFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Worker_CreateFile_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _Worker_CreateDir_Handler,
		},
		{
			MethodName: "RemoveDir",
			Handler:    _Worker_RemoveDir_Handler,
		},
		{
			MethodName: "CheckTargetPortUseful",
			Handler:    _Worker_CheckTargetPortUseful_Handler,
		},
		{
			MethodName: "SetupApp",
			Handler:    _Worker_SetupApp_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Worker_Done_Handler,
		},
		{
			MethodName: "ShutdownApp",
			Handler:    _Worker_ShutdownApp_Handler,
		},
		{
			MethodName: "AppHealth",
			Handler:    _Worker_AppHealth_Handler,
		},
		{
			MethodName: "TargetPortIntranetRoute",
			Handler:    _Worker_TargetPortIntranetRoute_Handler,
		},
		{
			MethodName: "TargetPortExternalRoute",
			Handler:    _Worker_TargetPortExternalRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchFileContent",
			Handler:       _Worker_FetchFileContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}
