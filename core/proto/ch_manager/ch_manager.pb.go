// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: ch_manager.proto

package ch_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypedChain_StateE int32

const (
	TypedChain_Handling TypedChain_StateE = 0
	TypedChain_Normal   TypedChain_StateE = 1
	TypedChain_Abnormal TypedChain_StateE = 2
)

// Enum value maps for TypedChain_StateE.
var (
	TypedChain_StateE_name = map[int32]string{
		0: "Handling",
		1: "Normal",
		2: "Abnormal",
	}
	TypedChain_StateE_value = map[string]int32{
		"Handling": 0,
		"Normal":   1,
		"Abnormal": 2,
	}
)

func (x TypedChain_StateE) Enum() *TypedChain_StateE {
	p := new(TypedChain_StateE)
	*p = x
	return p
}

func (x TypedChain_StateE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypedChain_StateE) Descriptor() protoreflect.EnumDescriptor {
	return file_ch_manager_proto_enumTypes[0].Descriptor()
}

func (TypedChain_StateE) Type() protoreflect.EnumType {
	return &file_ch_manager_proto_enumTypes[0]
}

func (x TypedChain_StateE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypedChain_StateE.Descriptor instead.
func (TypedChain_StateE) EnumDescriptor() ([]byte, []int) {
	return file_ch_manager_proto_rawDescGZIP(), []int{0, 0}
}

type TypedNode_StateE int32

const (
	TypedNode_Handling TypedNode_StateE = 0
	TypedNode_Normal   TypedNode_StateE = 1
	TypedNode_Abnormal TypedNode_StateE = 2
)

// Enum value maps for TypedNode_StateE.
var (
	TypedNode_StateE_name = map[int32]string{
		0: "Handling",
		1: "Normal",
		2: "Abnormal",
	}
	TypedNode_StateE_value = map[string]int32{
		"Handling": 0,
		"Normal":   1,
		"Abnormal": 2,
	}
)

func (x TypedNode_StateE) Enum() *TypedNode_StateE {
	p := new(TypedNode_StateE)
	*p = x
	return p
}

func (x TypedNode_StateE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypedNode_StateE) Descriptor() protoreflect.EnumDescriptor {
	return file_ch_manager_proto_enumTypes[1].Descriptor()
}

func (TypedNode_StateE) Type() protoreflect.EnumType {
	return &file_ch_manager_proto_enumTypes[1]
}

func (x TypedNode_StateE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypedNode_StateE.Descriptor instead.
func (TypedNode_StateE) EnumDescriptor() ([]byte, []int) {
	return file_ch_manager_proto_rawDescGZIP(), []int{2, 0}
}

// TypedChain chain definition
type TypedChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	UUID       string            `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Type       string            `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Version    string            `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	State      TypedChain_StateE `protobuf:"varint,6,opt,name=State,proto3,enum=TypedChain_StateE" json:"State,omitempty"` // 1处理中，2正常，3异常
	DriverID   int32             `protobuf:"varint,7,opt,name=DriverID,proto3" json:"DriverID,omitempty"`
	Tags       []string          `protobuf:"bytes,8,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CustomInfo map[string]string `protobuf:"bytes,9,rep,name=CustomInfo,proto3" json:"CustomInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypedChain) Reset() {
	*x = TypedChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ch_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedChain) ProtoMessage() {}

func (x *TypedChain) ProtoReflect() protoreflect.Message {
	mi := &file_ch_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedChain.ProtoReflect.Descriptor instead.
func (*TypedChain) Descriptor() ([]byte, []int) {
	return file_ch_manager_proto_rawDescGZIP(), []int{0}
}

func (x *TypedChain) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TypedChain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypedChain) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *TypedChain) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TypedChain) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TypedChain) GetState() TypedChain_StateE {
	if x != nil {
		return x.State
	}
	return TypedChain_Handling
}

func (x *TypedChain) GetDriverID() int32 {
	if x != nil {
		return x.DriverID
	}
	return 0
}

func (x *TypedChain) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TypedChain) GetCustomInfo() map[string]string {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

type TypedNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*TypedNode `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *TypedNodes) Reset() {
	*x = TypedNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ch_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedNodes) ProtoMessage() {}

func (x *TypedNodes) ProtoReflect() protoreflect.Message {
	mi := &file_ch_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedNodes.ProtoReflect.Descriptor instead.
func (*TypedNodes) Descriptor() ([]byte, []int) {
	return file_ch_manager_proto_rawDescGZIP(), []int{1}
}

func (x *TypedNodes) GetNodes() []*TypedNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type TypedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	UUID       string            `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Type       string            `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	State      TypedNode_StateE  `protobuf:"varint,5,opt,name=State,proto3,enum=TypedNode_StateE" json:"State,omitempty"` // 1处理中，2正常，3异常
	Message    string            `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
	MachineID  int32             `protobuf:"varint,7,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
	ChainID    int32             `protobuf:"varint,8,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Tags       []string          `protobuf:"bytes,9,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CustomInfo map[string]string `protobuf:"bytes,10,rep,name=CustomInfo,proto3" json:"CustomInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypedNode) Reset() {
	*x = TypedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ch_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedNode) ProtoMessage() {}

func (x *TypedNode) ProtoReflect() protoreflect.Message {
	mi := &file_ch_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedNode.ProtoReflect.Descriptor instead.
func (*TypedNode) Descriptor() ([]byte, []int) {
	return file_ch_manager_proto_rawDescGZIP(), []int{2}
}

func (x *TypedNode) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TypedNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypedNode) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *TypedNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TypedNode) GetState() TypedNode_StateE {
	if x != nil {
		return x.State
	}
	return TypedNode_Handling
}

func (x *TypedNode) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TypedNode) GetMachineID() int32 {
	if x != nil {
		return x.MachineID
	}
	return 0
}

func (x *TypedNode) GetChainID() int32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *TypedNode) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TypedNode) GetCustomInfo() map[string]string {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

var File_ch_manager_proto protoreflect.FileDescriptor

var file_ch_manager_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfa, 0x02, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02, 0x22,
	0x2e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x93, 0x03, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x02, 0x32, 0x8e, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x1a, 0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x00,
	0x12, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x0b, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x0b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ch_manager_proto_rawDescOnce sync.Once
	file_ch_manager_proto_rawDescData = file_ch_manager_proto_rawDesc
)

func file_ch_manager_proto_rawDescGZIP() []byte {
	file_ch_manager_proto_rawDescOnce.Do(func() {
		file_ch_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_ch_manager_proto_rawDescData)
	})
	return file_ch_manager_proto_rawDescData
}

var file_ch_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ch_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ch_manager_proto_goTypes = []interface{}{
	(TypedChain_StateE)(0), // 0: TypedChain.StateE
	(TypedNode_StateE)(0),  // 1: TypedNode.StateE
	(*TypedChain)(nil),     // 2: TypedChain
	(*TypedNodes)(nil),     // 3: TypedNodes
	(*TypedNode)(nil),      // 4: TypedNode
	nil,                    // 5: TypedChain.CustomInfoEntry
	nil,                    // 6: TypedNode.CustomInfoEntry
}
var file_ch_manager_proto_depIdxs = []int32{
	0, // 0: TypedChain.State:type_name -> TypedChain.StateE
	5, // 1: TypedChain.CustomInfo:type_name -> TypedChain.CustomInfoEntry
	4, // 2: TypedNodes.Nodes:type_name -> TypedNode
	1, // 3: TypedNode.State:type_name -> TypedNode.StateE
	6, // 4: TypedNode.CustomInfo:type_name -> TypedNode.CustomInfoEntry
	2, // 5: ChainManage.ReportChain:input_type -> TypedChain
	3, // 6: ChainManage.ReportNodes:input_type -> TypedNodes
	2, // 7: ChainManage.UpdateChain:input_type -> TypedChain
	2, // 8: ChainManage.ReportChain:output_type -> TypedChain
	3, // 9: ChainManage.ReportNodes:output_type -> TypedNodes
	2, // 10: ChainManage.UpdateChain:output_type -> TypedChain
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ch_manager_proto_init() }
func file_ch_manager_proto_init() {
	if File_ch_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ch_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ch_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ch_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ch_manager_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ch_manager_proto_goTypes,
		DependencyIndexes: file_ch_manager_proto_depIdxs,
		EnumInfos:         file_ch_manager_proto_enumTypes,
		MessageInfos:      file_ch_manager_proto_msgTypes,
	}.Build()
	File_ch_manager_proto = out.File
	file_ch_manager_proto_rawDesc = nil
	file_ch_manager_proto_goTypes = nil
	file_ch_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChainManageClient is the client API for ChainManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainManageClient interface {
	// ReportChain report typed chain to db
	ReportChain(ctx context.Context, in *TypedChain, opts ...grpc.CallOption) (*TypedChain, error)
	// ReportNodes report typed nodes to db
	ReportNodes(ctx context.Context, in *TypedNodes, opts ...grpc.CallOption) (*TypedNodes, error)
	// UpdateChain update typed chain in db, ID param in typed chain is in need
	UpdateChain(ctx context.Context, in *TypedChain, opts ...grpc.CallOption) (*TypedChain, error)
}

type chainManageClient struct {
	cc grpc.ClientConnInterface
}

func NewChainManageClient(cc grpc.ClientConnInterface) ChainManageClient {
	return &chainManageClient{cc}
}

func (c *chainManageClient) ReportChain(ctx context.Context, in *TypedChain, opts ...grpc.CallOption) (*TypedChain, error) {
	out := new(TypedChain)
	err := c.cc.Invoke(ctx, "/ChainManage/ReportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainManageClient) ReportNodes(ctx context.Context, in *TypedNodes, opts ...grpc.CallOption) (*TypedNodes, error) {
	out := new(TypedNodes)
	err := c.cc.Invoke(ctx, "/ChainManage/ReportNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainManageClient) UpdateChain(ctx context.Context, in *TypedChain, opts ...grpc.CallOption) (*TypedChain, error) {
	out := new(TypedChain)
	err := c.cc.Invoke(ctx, "/ChainManage/UpdateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainManageServer is the server API for ChainManage service.
type ChainManageServer interface {
	// ReportChain report typed chain to db
	ReportChain(context.Context, *TypedChain) (*TypedChain, error)
	// ReportNodes report typed nodes to db
	ReportNodes(context.Context, *TypedNodes) (*TypedNodes, error)
	// UpdateChain update typed chain in db, ID param in typed chain is in need
	UpdateChain(context.Context, *TypedChain) (*TypedChain, error)
}

// UnimplementedChainManageServer can be embedded to have forward compatible implementations.
type UnimplementedChainManageServer struct {
}

func (*UnimplementedChainManageServer) ReportChain(context.Context, *TypedChain) (*TypedChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportChain not implemented")
}
func (*UnimplementedChainManageServer) ReportNodes(context.Context, *TypedNodes) (*TypedNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNodes not implemented")
}
func (*UnimplementedChainManageServer) UpdateChain(context.Context, *TypedChain) (*TypedChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChain not implemented")
}

func RegisterChainManageServer(s *grpc.Server, srv ChainManageServer) {
	s.RegisterService(&_ChainManage_serviceDesc, srv)
}

func _ChainManage_ReportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypedChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManageServer).ReportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChainManage/ReportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManageServer).ReportChain(ctx, req.(*TypedChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainManage_ReportNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypedNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManageServer).ReportNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChainManage/ReportNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManageServer).ReportNodes(ctx, req.(*TypedNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainManage_UpdateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypedChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManageServer).UpdateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChainManage/UpdateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManageServer).UpdateChain(ctx, req.(*TypedChain))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChainManage",
	HandlerType: (*ChainManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportChain",
			Handler:    _ChainManage_ReportChain_Handler,
		},
		{
			MethodName: "ReportNodes",
			Handler:    _ChainManage_ReportNodes_Handler,
		},
		{
			MethodName: "UpdateChain",
			Handler:    _ChainManage_UpdateChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ch_manager.proto",
}
