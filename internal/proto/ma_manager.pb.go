// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: ma_manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Machine machine definition
type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UUID        string            `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State       int32             `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"` // 1处理中，2正常，3异常
	DriverID    int32             `protobuf:"varint,4,opt,name=DriverID,proto3" json:"DriverID,omitempty"`
	MachineTags []string          `protobuf:"bytes,5,rep,name=MachineTags,proto3" json:"MachineTags,omitempty"`
	Info        map[string]string `protobuf:"bytes,6,rep,name=Info,proto3" json:"Info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ma_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_ma_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_ma_manager_proto_rawDescGZIP(), []int{0}
}

func (x *Machine) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Machine) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Machine) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Machine) GetDriverID() int32 {
	if x != nil {
		return x.DriverID
	}
	return 0
}

func (x *Machine) GetMachineTags() []string {
	if x != nil {
		return x.MachineTags
	}
	return nil
}

func (x *Machine) GetInfo() map[string]string {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_ma_manager_proto protoreflect.FileDescriptor

var file_ma_manager_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x37,
	0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x3a, 0x0a, 0x0d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x08, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0x08, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ma_manager_proto_rawDescOnce sync.Once
	file_ma_manager_proto_rawDescData = file_ma_manager_proto_rawDesc
)

func file_ma_manager_proto_rawDescGZIP() []byte {
	file_ma_manager_proto_rawDescOnce.Do(func() {
		file_ma_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_ma_manager_proto_rawDescData)
	})
	return file_ma_manager_proto_rawDescData
}

var file_ma_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ma_manager_proto_goTypes = []interface{}{
	(*Machine)(nil), // 0: Machine
	nil,             // 1: Machine.InfoEntry
}
var file_ma_manager_proto_depIdxs = []int32{
	1, // 0: Machine.Info:type_name -> Machine.InfoEntry
	0, // 1: MachineManage.ReportInitMachine:input_type -> Machine
	0, // 2: MachineManage.ReportInitMachine:output_type -> Machine
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ma_manager_proto_init() }
func file_ma_manager_proto_init() {
	if File_ma_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ma_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ma_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ma_manager_proto_goTypes,
		DependencyIndexes: file_ma_manager_proto_depIdxs,
		MessageInfos:      file_ma_manager_proto_msgTypes,
	}.Build()
	File_ma_manager_proto = out.File
	file_ma_manager_proto_rawDesc = nil
	file_ma_manager_proto_goTypes = nil
	file_ma_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineManageClient is the client API for MachineManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineManageClient interface {
	// ReportInitMachine report Machine message to init
	ReportInitMachine(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error)
}

type machineManageClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineManageClient(cc grpc.ClientConnInterface) MachineManageClient {
	return &machineManageClient{cc}
}

func (c *machineManageClient) ReportInitMachine(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/MachineManage/ReportInitMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineManageServer is the server API for MachineManage service.
type MachineManageServer interface {
	// ReportInitMachine report Machine message to init
	ReportInitMachine(context.Context, *Machine) (*Machine, error)
}

// UnimplementedMachineManageServer can be embedded to have forward compatible implementations.
type UnimplementedMachineManageServer struct {
}

func (*UnimplementedMachineManageServer) ReportInitMachine(context.Context, *Machine) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInitMachine not implemented")
}

func RegisterMachineManageServer(s *grpc.Server, srv MachineManageServer) {
	s.RegisterService(&_MachineManage_serviceDesc, srv)
}

func _MachineManage_ReportInitMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineManageServer).ReportInitMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MachineManage/ReportInitMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineManageServer).ReportInitMachine(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MachineManage",
	HandlerType: (*MachineManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportInitMachine",
			Handler:    _MachineManage_ReportInitMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ma_manager.proto",
}
